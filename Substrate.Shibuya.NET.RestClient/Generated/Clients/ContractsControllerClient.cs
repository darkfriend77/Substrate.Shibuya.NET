//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Shibuya.NET.RestClient.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.Shibuya.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec;
   using Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_contracts.wasm;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_contracts.storage;
   using Substrate.Shibuya.NET.RestClient.Generated.Interfaces;
   
   public sealed class ContractsControllerClient : BaseClient, IContractsControllerClient
   {
      private HttpClient _httpClient;
      private BaseSubscriptionClient _subscriptionClient;
      public ContractsControllerClient(HttpClient httpClient, BaseSubscriptionClient subscriptionClient)
      {
         _httpClient = httpClient;
         _subscriptionClient = subscriptionClient;
      }
      public async Task<BoundedVecT21> GetPristineCode(Substrate.Shibuya.NET.NetApiExt.Generated.Model.primitive_types.H256 key)
      {
         return await SendRequestAsync<BoundedVecT21>(_httpClient, "contracts/pristinecode", Substrate.Shibuya.NET.NetApiExt.Generated.Storage.ContractsStorage.PristineCodeParams(key));
      }
      public async Task<bool> SubscribePristineCode(Substrate.Shibuya.NET.NetApiExt.Generated.Model.primitive_types.H256 key)
      {
         return await _subscriptionClient.SubscribeAsync("Contracts.PristineCode", Substrate.Shibuya.NET.NetApiExt.Generated.Storage.ContractsStorage.PristineCodeParams(key));
      }
      public async Task<PrefabWasmModule> GetCodeStorage(Substrate.Shibuya.NET.NetApiExt.Generated.Model.primitive_types.H256 key)
      {
         return await SendRequestAsync<PrefabWasmModule>(_httpClient, "contracts/codestorage", Substrate.Shibuya.NET.NetApiExt.Generated.Storage.ContractsStorage.CodeStorageParams(key));
      }
      public async Task<bool> SubscribeCodeStorage(Substrate.Shibuya.NET.NetApiExt.Generated.Model.primitive_types.H256 key)
      {
         return await _subscriptionClient.SubscribeAsync("Contracts.CodeStorage", Substrate.Shibuya.NET.NetApiExt.Generated.Storage.ContractsStorage.CodeStorageParams(key));
      }
      public async Task<OwnerInfo> GetOwnerInfoOf(Substrate.Shibuya.NET.NetApiExt.Generated.Model.primitive_types.H256 key)
      {
         return await SendRequestAsync<OwnerInfo>(_httpClient, "contracts/ownerinfoof", Substrate.Shibuya.NET.NetApiExt.Generated.Storage.ContractsStorage.OwnerInfoOfParams(key));
      }
      public async Task<bool> SubscribeOwnerInfoOf(Substrate.Shibuya.NET.NetApiExt.Generated.Model.primitive_types.H256 key)
      {
         return await _subscriptionClient.SubscribeAsync("Contracts.OwnerInfoOf", Substrate.Shibuya.NET.NetApiExt.Generated.Storage.ContractsStorage.OwnerInfoOfParams(key));
      }
      public async Task<U64> GetNonce()
      {
         return await SendRequestAsync<U64>(_httpClient, "contracts/nonce");
      }
      public async Task<bool> SubscribeNonce()
      {
         return await _subscriptionClient.SubscribeAsync("Contracts.Nonce");
      }
      public async Task<ContractInfo> GetContractInfoOf(Substrate.Shibuya.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
      {
         return await SendRequestAsync<ContractInfo>(_httpClient, "contracts/contractinfoof", Substrate.Shibuya.NET.NetApiExt.Generated.Storage.ContractsStorage.ContractInfoOfParams(key));
      }
      public async Task<bool> SubscribeContractInfoOf(Substrate.Shibuya.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
      {
         return await _subscriptionClient.SubscribeAsync("Contracts.ContractInfoOf", Substrate.Shibuya.NET.NetApiExt.Generated.Storage.ContractsStorage.ContractInfoOfParams(key));
      }
      public async Task<BoundedVecT22> GetDeletionQueue()
      {
         return await SendRequestAsync<BoundedVecT22>(_httpClient, "contracts/deletionqueue");
      }
      public async Task<bool> SubscribeDeletionQueue()
      {
         return await _subscriptionClient.SubscribeAsync("Contracts.DeletionQueue");
      }
   }
}
