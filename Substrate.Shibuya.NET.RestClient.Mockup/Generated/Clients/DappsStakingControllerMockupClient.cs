//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.Shibuya.NET.RestClient.Mockup.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.Shibuya.NET.NetApiExt.Generated.Model.pallet_dapps_staking;
   using Substrate.Shibuya.NET.NetApiExt.Generated.Model.shibuya_runtime;
   using Substrate.Shibuya.NET.RestClient.Mockup.Generated.Interfaces;
   
   public sealed class DappsStakingControllerMockupClient : MockupBaseClient, IDappsStakingControllerMockupClient
   {
      private HttpClient _httpClient;
      public DappsStakingControllerMockupClient(HttpClient httpClient)
      {
         _httpClient = httpClient;
      }
      public async Task<bool> SetPalletDisabled(Bool value)
      {
         return await SendMockupRequestAsync(_httpClient, "DappsStaking/PalletDisabled", value.Encode(), Substrate.Shibuya.NET.NetApiExt.Generated.Storage.DappsStakingStorage.PalletDisabledParams());
      }
      public async Task<bool> SetLedger(AccountLedger value, Substrate.Shibuya.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "DappsStaking/Ledger", value.Encode(), Substrate.Shibuya.NET.NetApiExt.Generated.Storage.DappsStakingStorage.LedgerParams(key));
      }
      public async Task<bool> SetCurrentEra(U32 value)
      {
         return await SendMockupRequestAsync(_httpClient, "DappsStaking/CurrentEra", value.Encode(), Substrate.Shibuya.NET.NetApiExt.Generated.Storage.DappsStakingStorage.CurrentEraParams());
      }
      public async Task<bool> SetBlockRewardAccumulator(RewardInfo value)
      {
         return await SendMockupRequestAsync(_httpClient, "DappsStaking/BlockRewardAccumulator", value.Encode(), Substrate.Shibuya.NET.NetApiExt.Generated.Storage.DappsStakingStorage.BlockRewardAccumulatorParams());
      }
      public async Task<bool> SetForceEra(EnumForcing value)
      {
         return await SendMockupRequestAsync(_httpClient, "DappsStaking/ForceEra", value.Encode(), Substrate.Shibuya.NET.NetApiExt.Generated.Storage.DappsStakingStorage.ForceEraParams());
      }
      public async Task<bool> SetNextEraStartingBlock(U32 value)
      {
         return await SendMockupRequestAsync(_httpClient, "DappsStaking/NextEraStartingBlock", value.Encode(), Substrate.Shibuya.NET.NetApiExt.Generated.Storage.DappsStakingStorage.NextEraStartingBlockParams());
      }
      public async Task<bool> SetRegisteredDevelopers(EnumSmartContract value, Substrate.Shibuya.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "DappsStaking/RegisteredDevelopers", value.Encode(), Substrate.Shibuya.NET.NetApiExt.Generated.Storage.DappsStakingStorage.RegisteredDevelopersParams(key));
      }
      public async Task<bool> SetRegisteredDapps(DAppInfo value, EnumSmartContract key)
      {
         return await SendMockupRequestAsync(_httpClient, "DappsStaking/RegisteredDapps", value.Encode(), Substrate.Shibuya.NET.NetApiExt.Generated.Storage.DappsStakingStorage.RegisteredDappsParams(key));
      }
      public async Task<bool> SetGeneralEraInfo(EraInfo value, U32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "DappsStaking/GeneralEraInfo", value.Encode(), Substrate.Shibuya.NET.NetApiExt.Generated.Storage.DappsStakingStorage.GeneralEraInfoParams(key));
      }
      public async Task<bool> SetContractEraStake(ContractStakeInfo value, Substrate.NetApi.Model.Types.Base.BaseTuple<EnumSmartContract, U32> key)
      {
         return await SendMockupRequestAsync(_httpClient, "DappsStaking/ContractEraStake", value.Encode(), Substrate.Shibuya.NET.NetApiExt.Generated.Storage.DappsStakingStorage.ContractEraStakeParams(key));
      }
      public async Task<bool> SetGeneralStakerInfo(StakerInfo value, Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Shibuya.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, EnumSmartContract> key)
      {
         return await SendMockupRequestAsync(_httpClient, "DappsStaking/GeneralStakerInfo", value.Encode(), Substrate.Shibuya.NET.NetApiExt.Generated.Storage.DappsStakingStorage.GeneralStakerInfoParams(key));
      }
      public async Task<bool> SetStorageVersion(EnumVersion value)
      {
         return await SendMockupRequestAsync(_httpClient, "DappsStaking/StorageVersion", value.Encode(), Substrate.Shibuya.NET.NetApiExt.Generated.Storage.DappsStakingStorage.StorageVersionParams());
      }
   }
}
